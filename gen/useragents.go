// The following directive is necessary to build the package:

//go:build ignore
// +build ignore

// This program generates useragents.go. It can be invoked by running
//go:generate

//go:generate go run ../gen/useragents.go

package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
	"time"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .TIMESTAMP }}
// using data from
// {{ .JSON }}
package {{ .NAME }}

// {{ .NAME }}Agent returns true if agent is {{ .NAME }} user agent
func {{ .NAME }}Agent(agent string) bool {
	switch agent {
		{{- range $idx, $item := .AGENTS }}
		case "{{ $item }}":
			return true
		{{- end }}
		default:
			return false
	}
}
`))

func main() {

	jsonPaths := []string{path.Join(
		"..", "gen", "ua_ctv.json",
	), path.Join(
		"..", "gen", "ua_desktop.json",
	), path.Join(
		"..", "gen", "ua_phone.json",
	), path.Join(
		"..", "gen", "ua_tablet.json",
	)}

	userAgents := map[string][]string{
		"tv": {jsonPaths[0], path.Join(
			"..", "useragents", "tv", "gen_tv.go",
		)},
		"desktop": {jsonPaths[1], path.Join(
			"..", "useragents", "desktop", "gen_desktop.go",
		)},
		"phone": {jsonPaths[2], path.Join(
			"..", "useragents", "phone", "gen_phone.go",
		)},
		"tablet": {jsonPaths[3], path.Join(
			"..", "useragents", "tablet", "gen_tablet.go",
		)},
	}
	for name, files := range userAgents {
		if f, err := os.Create(files[1]); err != nil {
			log.Fatal(err)
		} else {
			defer f.Close()

			raw := []string{}
			if file, err := ioutil.ReadFile(files[0]); err == nil {
				if err = json.Unmarshal([]byte(file), &raw); err == nil {
					data := make([]string, 0, len(raw))
					for _, item := range raw {

						data = append(data, strings.ReplaceAll(item, "\"", "\\\""))
					}
					packageTemplate.Execute(f, struct {
						TIMESTAMP time.Time
						NAME      string
						JSON      string
						AGENTS    []string
					}{
						TIMESTAMP: time.Now(),
						NAME:      name,
						JSON:      files[0],
						AGENTS:    data,
					})
				} else {
					log.Fatal(err)
				}
			} else {
				log.Fatal(err)
			}
		}

	}

}
